name: Raspberry Pi 5 Validation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  pi5-validation:
    name: Validate Pi 5 Constraints
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psutil pytest pytest-asyncio memory-profiler

      - name: Check memory constraints
        run: |
          echo "Validating memory usage targets..."
          python3 << 'EOF'
          import psutil
          import sys

          # Pi 5 has 8GB RAM - we target <50MB for monitoring
          MONITORING_MEMORY_TARGET_MB = 50
          PI5_TOTAL_MEMORY_GB = 8

          available_gb = psutil.virtual_memory().available / (1024**3)
          print(f"Available memory: {available_gb:.2f}GB")
          print(f"Pi 5 total memory: {PI5_TOTAL_MEMORY_GB}GB")
          print(f"Monitoring memory target: <{MONITORING_MEMORY_TARGET_MB}MB")

          # Check if we have at least 1GB free (minimum operational threshold)
          if available_gb < 1.0:
              print(f"::warning::Available memory ({available_gb:.2f}GB) is low")
          else:
              print(f"✓ Memory check passed")
          EOF

      - name: Check CPU usage constraints
        run: |
          echo "Validating CPU usage targets..."
          python3 << 'EOF'
          import psutil
          import time

          # Pi 5 has 4 cores - we target <2% total CPU for monitoring
          CPU_TARGET_PERCENT = 2.0

          # Measure baseline CPU
          cpu_percent = psutil.cpu_percent(interval=1)
          print(f"Current CPU usage: {cpu_percent}%")
          print(f"Target: <{CPU_TARGET_PERCENT}%")

          if cpu_percent > 20:  # High CPU in CI is expected
              print(f"::notice::CPU usage is high in CI environment")
          else:
              print(f"✓ CPU check passed")
          EOF

      - name: Validate thermal monitoring
        run: |
          echo "Validating thermal monitoring implementation..."
          python3 << 'EOF'
          import sys
          sys.path.insert(0, 'code')

          from metrics import get_cpu_temperature

          # On non-Pi platforms, should return -1
          temp = get_cpu_temperature()
          print(f"CPU temperature reading: {temp}°C")

          if temp == -1.0:
              print("✓ Graceful fallback on non-Pi platform")
          elif 0 <= temp <= 100:
              print(f"✓ Valid temperature reading: {temp}°C")
          else:
              print(f"::error::Invalid temperature reading: {temp}°C")
              sys.exit(1)
          EOF

      - name: Check file size limits
        run: |
          echo "Checking 300-line file size limit..."
          find code/ -name "*.py" -type f | while read file; do
            lines=$(wc -l < "$file")
            if [ $lines -gt 300 ]; then
              echo "::error file=$file::File exceeds 300 lines: $lines"
              exit 1
            else
              echo "✓ $file: $lines lines"
            fi
          done

      - name: Validate offline-first architecture
        run: |
          echo "Checking for network dependencies in monitoring code..."

          # Check for network imports (should only be in server.py, not monitoring)
          if grep -r "import requests" code/health_checks.py code/metrics.py code/monitoring/ 2>/dev/null; then
            echo "::error::Monitoring code should not have network dependencies"
            exit 1
          fi

          if grep -r "import urllib" code/health_checks.py code/metrics.py code/monitoring/ 2>/dev/null; then
            echo "::error::Monitoring code should not have network dependencies"
            exit 1
          fi

          echo "✓ No network dependencies found in monitoring code"

      - name: Test swap usage thresholds
        run: |
          echo "Validating swap thresholds..."
          python3 << 'EOF'
          import sys
          sys.path.insert(0, 'code')

          import psutil

          # Defined thresholds from spec
          SWAP_DEGRADED_GB = 2
          SWAP_UNHEALTHY_GB = 4

          swap = psutil.swap_memory()
          swap_used_gb = swap.used / (1024**3)

          print(f"Current swap usage: {swap_used_gb:.2f}GB")
          print(f"Degraded threshold: {SWAP_DEGRADED_GB}GB")
          print(f"Unhealthy threshold: {SWAP_UNHEALTHY_GB}GB")

          if swap_used_gb < SWAP_DEGRADED_GB:
              print("✓ Swap usage: healthy")
          elif swap_used_gb < SWAP_UNHEALTHY_GB:
              print("⚠ Swap usage: degraded")
          else:
              print("✗ Swap usage: unhealthy")
          EOF

      - name: Generate Pi 5 deployment checklist
        if: github.ref == 'refs/heads/main'
        run: |
          cat > pi5-deployment-checklist.md << 'EOF'
          # Raspberry Pi 5 Deployment Checklist

          ## Pre-Deployment Validation
          - [ ] Code passes all unit tests
          - [ ] Integration tests validated
          - [ ] Memory usage <50MB for monitoring
          - [ ] CPU overhead <2%
          - [ ] All files ≤300 lines
          - [ ] No network dependencies in monitoring

          ## Hardware Validation Required
          - [ ] Test CPU temperature reading from /sys/class/thermal/
          - [ ] Test vcgencmd fallback
          - [ ] Validate 75°C warning threshold
          - [ ] Validate 80°C critical threshold
          - [ ] Test under sustained load (30+ minutes)

          ## Performance Targets
          - [ ] Health endpoint: <500ms (p95)
          - [ ] Metrics endpoint: <50ms (p99)
          - [ ] Full pipeline: <1.8s latency

          ## Monitoring Setup
          - [ ] Verify thermal monitoring active
          - [ ] Set up alerting for 80°C+ temps
          - [ ] Monitor swap usage trends
          - [ ] Configure log rotation

          ## Testing on Actual Pi 5
          Run these commands:
          ```bash
          # Check temperature monitoring
          python3 -c "import sys; sys.path.insert(0, 'code'); from metrics import get_cpu_temperature; print(f'CPU Temp: {get_cpu_temperature()}°C')"

          # Run monitoring server
          python3 test_server_monitoring.py &

          # Test endpoints
          curl http://localhost:8000/health | jq
          curl http://localhost:8000/metrics

          # Load test
          for i in {1..100}; do curl -s http://localhost:8000/metrics > /dev/null; done
          ```
          EOF

          cat pi5-deployment-checklist.md

      - name: Upload Pi 5 checklist
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: pi5-deployment-checklist
          path: pi5-deployment-checklist.md
