name: Code Quality

on:
  push:
    branches: [main, develop, "001-phase-1-foundation"]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Linting and Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort mypy

      - name: Check code formatting with black
        run: |
          black --check --diff code/ tests/
        continue-on-error: true

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff code/ tests/
        continue-on-error: true

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 code/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

          # Exit-zero treats all errors as warnings
          flake8 code/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

      - name: Check file size limit (300 lines)
        run: |
          echo "Checking that all Python files are ≤300 lines..."
          VIOLATIONS=0
          while IFS= read -r file; do
            LINES=$(wc -l < "$file")
            if [ "$LINES" -gt 300 ]; then
              echo "::error file=$file::File has $LINES lines (max: 300)"
              VIOLATIONS=$((VIOLATIONS + 1))
            else
              echo "✓ $file: $LINES lines"
            fi
          done < <(find code/ -name "*.py" -type f)

          if [ "$VIOLATIONS" -gt 0 ]; then
            echo "::error::$VIOLATIONS file(s) exceed 300-line limit"
            exit 1
          fi

      - name: Type checking with mypy
        run: |
          mypy code/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true

      - name: Security check with bandit
        run: |
          pip install bandit
          bandit -r code/ -ll -f json -o bandit-report.json || true

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json
          retention-days: 30
